@using Projeto_Final.Models
@model LoginViewModel
@{
    ViewBag.Title = "Iniciar sessão";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <style>
        /* Estilos para o pop-up de login */
        .popup {
            display: none;
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
            overflow: auto;
        }

        .popup-content {
            background-color: #ffffff;
            margin: 10% auto;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            width: 80%;
            max-width: 500px;
            display: flex;
            align-items: center;
        }

        .login-image {
            flex: 1;
            max-width: 40%;
            margin-right: 20px;
            border-radius: 8px;
            overflow: hidden;
        }

            .login-image img {
                width: 100%;
                height: auto;
                display: block;
            }

        .vertical-line {
            height: 100%;
            width: 1px;
            background-color: #ccc;
            margin: 0 20px;
        }

        #loginForm {
            flex: 2;
            margin-top: 20px;
        }

        .form-control {
            width: 100%;
            margin-bottom: 15px;
            padding: 12px 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            transition: border-color 0.3s ease-in-out;
        }

            .form-control:focus {
                border-color: #007bff;
                outline: none;
            }

        .btn-login {
            width: 100%;
            padding: 12px;
            border-radius: 4px;
            background-color: #007bff;
            color: #fff;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease-in-out;
        }

            .btn-login:hover {
                background-color: #0056b3;
            }

        .forgot-password {
            text-align: center;
            margin-top: 10px;
        }

            .forgot-password a {
                color: #007bff;
                text-decoration: none;
                transition: color 0.3s ease-in-out;
            }

                .forgot-password a:hover {
                    color: #0056b3;
                }

        /* Estilo para o botão de mostrar senha */
        .show-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            background: transparent;
            border: none;
            font-size: 16px;
            color: #007bff;
        }
    </style>

    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

    <div class="container">
        <!-- Pop-up de login -->
        <div class="popup" id="loginPopup">
            <div class="popup-content">
                <div class="login-image">
                    <img src="~/fotos/logotipo StockConnect.jpg" alt="Logo">
                </div>
                <div class="vertical-line"></div>
                <section id="loginForm">
                    @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <h2 style="text-align: center; margin-bottom: 20px;">Iniciar sessão</h2>
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email", autocomplete = "username" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <div style="position: relative;">
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password", autocomplete = "current-password", id = "passwordField" })
                                <button type="button" class="show-password" id="togglePassword">
                                    <i class="glyphicon glyphicon-eye-open"></i>
                                </button>
                            </div>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <button type="submit" class="btn btn-login">Log in</button>
                        </div>
                    }
                </section>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('loginPopup').style.display = 'block';

            // Lógica para alternar a visibilidade da senha
            const togglePassword = document.getElementById('togglePassword');
            const passwordField = document.getElementById('passwordField');

            togglePassword.addEventListener('click', function () {
                // Alterna o tipo do campo de senha
                const type = passwordField.type === 'password' ? 'text' : 'password';
                passwordField.type = type;

                // Alterna o ícone
                this.innerHTML = type === 'password' ? '<i class="glyphicon glyphicon-eye-open"></i>' : '<i class="glyphicon glyphicon-eye-close"></i>';
            });
        });
    </script>

</body>
</html>